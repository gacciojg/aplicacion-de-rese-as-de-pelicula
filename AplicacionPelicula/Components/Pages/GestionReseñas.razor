@page "/GestionReseñas"
@inject PeliculaService PeliculaService
@inject ReseniaService ReseniaService


<style>
    body {
        background: linear-gradient(135deg, #000 0%, #1a1a1a 100%);
        color: #fff;
        font-family: 'Segoe UI', Arial, sans-serif;
        margin: 0;
    }

    /*barra superior */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #f5c518;
            padding: 12px 20px;
        }

        .navbar h2 {
            margin: 0;
            font-size: 20px;
            color: #000;
            font-weight: 700;
            text-transform: uppercase;
        }

        .navbar a {
            color: #fff;
            text-decoration: none;
            font-weight: bold;
            font-size: 14px;
        }

    .pelicula-header {
        display: flex;
        align-items: center;
        gap: 12px; /*espacio entre imagen y texto*/
        margin-bottom: 10px;
    }

    .pelicula-img {
        width: 80px; /*tamaño pequeño*/
        height: 90px;
        object-fit: cover;
        border-radius: 6px;
    }

    .pelicula-info h4 {
        margin: 0;
        font-size: 18px;
        color: #f5c518;
    }

    .pelicula-info p {
        margin: 0;
        font-size: 14px;
        color: #ddd;
    }


	.reseña-container {
        max-width: 900px;
        margin: 20px auto;
        padding: 15px;
	}

	.card {
        padding: 18px;
        border-radius: 12px;
        background: #1e1e1e;
        box-shadow: 0 6px 18px rgba(0,0,0,0.7);
        margin-bottom: 25px;
	}

		.card h4 {
            font-size: 18px;
            color: #f5c518;
            margin-bottom: 10px;
		}

	.reseñas-list {
		list-style: none;
		padding-left: 0;
	}

		.reseñas-list li {
			display: flex;
        flex-direction: column;
        background: #2a2a2a;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 10px;
		}

    .stars {
        display: flex;
        gap: 5px;
        cursor: pointer;
		}

	.btn-like {
		background-color: #28a745;
		color: white;
	}

	.btn-dislike {
		background-color: #dc3545;
		color: white;
	}

	.btn-like:hover {
		background-color: #218838;
	}

	.btn-dislike:hover {
		background-color: #c82333;
	}

	input.comment-input {
		margin-bottom: 10px;
		border-radius: 5px;
	}
</style>


<div class="reseña-container">
	<h3>Catalogo de Reseñas</h3>

	@if (peliculas == null)
	{
		<p>Cargando peliculas...</p>
	}
	else
	{
		@foreach (var pelicula in peliculas)
		{
			<div class="card my-3">
				<h4>
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
						<path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
						<path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
					</svg>
					@pelicula.Titulo (@pelicula.Anio)
				</h4>
				<p><b>Género:</b> @pelicula.Genero</p>
				<p>@pelicula.Descripcion</p>

				<h5>Reseñas</h5>
				@if (pelicula.Resenias?.Any() == true)
				{
					<ul class="reseñas-list">
						@foreach (var r in pelicula.Resenias)
						{
							<li>
								<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
									<path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
									<path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
								</svg>
								<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-hand-thumbs-up" viewBox="0 0 16 16">
									<path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2 2 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a10 10 0 0 0-.443.05 9.4 9.4 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a9 9 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.2 2.2 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.9.9 0 0 1-.121.416c-.165.288-.503.56-1.066.56z" />
								</svg>
								<span>@r.Comentario</span>
								<small>(@r.Fecha.ToLongDateString())</small>
							</li>
						}
					</ul>
				}
				else
				{
					<p><i>No hay reseñas aun</i></p>
				}

				<h6>Agregar reseña</h6>
                <input type="text" @bind="nuevoComentario" placeholder="Escribe un comentario" class="comment-input" />

                <div class="stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var idx = i; //copia por iteracion
                        <span class="star @(idx <= estrellasSeleccionadas ? "filled" : "")"@onclick="() => ToggleEstrellas(idx)">★</span>
                    }
				</div>
			</div>
		}
	}
</div>
@code {
	private List<Pelicula>? peliculas;
	private string nuevoComentario = "";

	protected override async Task OnInitializedAsync()
	{
		peliculas = await PeliculaService.GetPeliculasAsync();

		foreach(var peli in peliculas)//cargar reseñas para cada pelicula
		{
			peli.Resenias = await ReseniaService.GetReseñaByPeliculaIdsAsync(peli.Id);
		}
	}

	private async Task AgregarReseña(int peliculaId, bool meGusta)
	{
		if (string.IsNullOrWhiteSpace(nuevoComentario)) return;//valida que el comentario no este vacio

		var nuevaReseña = new Resenia
			{
				PeliculaId = peliculaId,
				Comentario = nuevoComentario,
				MeGusta = meGusta
			};

		await ReseniaService.AgregarReseñasAsync(nuevaReseña);

		var pelicula = peliculas.First(p => p.Id == peliculaId);
		pelicula.Resenias = await ReseniaService.GetReseñaByPeliculaIdsAsync(peliculaId);

		nuevoComentario = "";
		StateHasChanged();//notifica a blazor que el estado ha cambiado y debe actualizar la ui
	}
	//componentes blazor: usa modelo de componentes blazor con
	//marcado html/razor
	//logica c# en @code
	//binding de datos (@bind)
	//manejo de eventos (@onclick)
}

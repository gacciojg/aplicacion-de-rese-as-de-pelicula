@page "/GestionReseñas"
@using AplicacionPelicula.Servicios
@inject PeliculaService PeliculaService
@inject ReseniaService ReseniaService

<style>
    body {
        background: linear-gradient(135deg, #000 0%, #1a1a1a 100%);
        color: #fff;
        font-family: 'Segoe UI', Arial, sans-serif;
        margin: 0;
    }

    .navbar { /*barra superior */
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f5c518;
        padding: 12px 20px;
    }

        .navbar h2 {
            margin: 0;
            font-size: 20px;
            color: #000;
            font-weight: 700;
            text-transform: uppercase;
        }

        .navbar a {
            color: #fff;
            text-decoration: none;
            font-weight: bold;
            font-size: 14px;
        }

    .pelicula-header {
        display: flex;
        align-items: center;
        gap: 12px; /*espacio entre imagen y texto*/
        margin-bottom: 10px;
    }

    .pelicula-img {
        width: 80px; /*tamaño pequeño*/
        height: 90px;
        object-fit: cover;
        border-radius: 6px;
    }

    .pelicula-info h4 {
        margin: 0;
        font-size: 18px;
        color: #f5c518;
    }

    .pelicula-info p {
        margin: 0;
        font-size: 14px;
        color: #ddd;
    }


    .reseña-container {
        max-width: 900px;
        margin: 20px auto;
        padding: 15px;
    }

    .card {
        padding: 18px;
        border-radius: 12px;
        background: #1e1e1e;
        box-shadow: 0 6px 18px rgba(0,0,0,0.7);
        margin-bottom: 25px;
    }

        .card h4 {
            font-size: 18px;
            color: #f5c518;
            margin-bottom: 10px;
        }

    .reseñas-list li {
        display: flex;
        flex-direction: column;
        background: #2a2a2a;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .stars {
        display: flex;
        gap: 5px;
        cursor: pointer;
    }

        .star {
            font-size: 20px;
        color: #555;/
        transition: color 0.2s;
        }

        .star.filled {
            color: #f5c518; 
        }

    .comment-input {
        margin-top: 10px;
        border-radius: 6px;
        padding: 10px;
        width: 100%;
        border: none;
        background: #2a2a2a;
        color: #fff;
    }

    .btn-submit {
        margin-top: 12px;
        width: 100%;
        padding: 12px;
        border-radius: 6px;
        border: none;
        font-weight: bold;
        background: #f5c518;
        color: #000;
        cursor: pointer;
        transition: background 0.2s;
    }

        .btn-submit:hover {
            background: #d4a90d;
        }
</style>

<div class="navbar">
    <h2>Criticon</h2>
    <NavLink href="/">iniciar sesion</NavLink>
</div>

<div class="reseña-container">
    @if (peliculas == null)
    {
        <p>Cargando peliculas...</p>
    }
    else
    {
        @foreach (var pelicula in peliculas)
        {
            <div class="card">
                <div class="pelicula-header">
                    @if (pelicula.ImagenBytes != null && pelicula.ImagenBytes.Length > 0)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(pelicula.ImagenBytes)"
                             alt="Imagen de @pelicula.Titulo" class="pelicula-img" />
                    }
                    <div class="pelicula-info">
                        <h4>@pelicula.Titulo (@pelicula.Anio)</h4>
                        <p><b>Genero:</b> @pelicula.Genero</p>
                    </div>
                </div>
                <p>@pelicula.Descripcion</p>

                @if (pelicula.Resenias?.Any() == true)
                {
                    var promedio = pelicula.Resenias.Average(r => r.Estrellas);
                    <p><b>Promedio:</b> @promedio.ToString("0.0") ★</p>
                }

                <h5>Reseñas</h5>
                @if (pelicula.Resenias?.Any() == true)
                {
                    <ul class="reseñas-list">
                        @foreach (var r in pelicula.Resenias)
                        {
                            <li>
                                <span>@r.Comentario</span>
                                <div class="stars">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= r.Estrellas ? "filled" : "")">★</span>
                                    }
                                </div>
                                <small style="color:#aaa;">(@r.Fecha.ToShortDateString())</small>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p><i>No hay reseñas aun</i></p>
                }

                <h6>Agregar reseña</h6>
                <input type="text" @bind="comentarioPorPelicula[pelicula.Id]" placeholder="Escribe un comentario" class="comment-input" />

                <div class="stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var idx = i;
                        <span class="star @(idx <= estrellasPorPelicula.GetValueOrDefault(pelicula.Id) ? "filled" : "")"
                        @onclick="() => ToggleEstrellas(pelicula.Id, idx)">★</span>
                    }
                </div>
                <button class="btn-submit" @onclick="() => AgregarReseña(pelicula.Id)">Finalizar opinión</button>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <p style="color:#e74c3c;">@mensajeError</p>
                }

            </div>
        }
    }
</div>

@code {
    private List<Modelos.Pelicula>? peliculas;
    private Dictionary<int, string> comentarioPorPelicula = new();
    private Dictionary<int, int> estrellasPorPelicula = new();
    private string mensajeError = "";

    protected override async Task OnInitializedAsync()//aseguro que cuando la pagina abre, todo ya este disponible
    {
        peliculas = await PeliculaService.GetPeliculasAsync();

        foreach(var peli in peliculas)//cargar reseñas para cada pelicula
        {
            peli.Resenias = await ReseniaService.GetReseniasPorPeliculasAsync(peli.Id);

            comentarioPorPelicula[peli.Id] = ""; //inicializo claves para evitar keyNotFoundexception
            estrellasPorPelicula[peli.Id] = 0;
        }
    }

    private async Task AgregarReseña(int peliculaId)//valido que el comentario no este vacio y que al menos haya 1 estrella
    {
        var comentario = comentarioPorPelicula.GetValueOrDefault(peliculaId);
        var estrellas = estrellasPorPelicula.GetValueOrDefault(peliculaId);

        if(string.IsNullOrWhiteSpace(comentario) || estrellas == 0)
        {
            mensajeError = "debes escribir un comentario y seleccionar al menos una estrella";
            return;
        }

        mensajeError = "";
        var nuevaReseña = new Modelos.Resenia
			{
				PeliculaId = peliculaId,
				Comentario = comentario,
				Estrellas = estrellas
			};

        await ReseniaService.AgregarReseniasAsync(nuevaReseña);
        var pelicula = peliculas.First(p => p.Id == peliculaId);
        pelicula.Resenias = await ReseniaService.GetReseniasPorPeliculasAsync(peliculaId);

        comentarioPorPelicula[peliculaId] = "";
        estrellasPorPelicula[peliculaId] = 0;
        StateHasChanged();//notifica a blazor que el estado ha cambiado y debe actualizar la ui
    }

    private void ToggleEstrellas(int peliculaId ,int cantidad)
    {
        var val = Math.Clamp(cantidad, 1, 5);//aseguro que esté entre 1 y 5
        estrellasPorPelicula[peliculaId] = val;//si clickeo la misma cantidad, deselecciona
    }
}
